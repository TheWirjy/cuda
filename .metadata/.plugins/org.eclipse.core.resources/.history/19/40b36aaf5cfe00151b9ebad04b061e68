#include "Indice2D.h"
#include "IndiceTools_GPU.h"
#include "cudaTools.h"
#include "Device.h"
#include "RaytracingMath.h"
#include "Sphere.h"

/* on fait des define car conditions ne bougent plus à l'exécution et c'est plus performant que les IF qui doivent être évalués à chaque itération
 * Ces valeurs doivent être cohérente avec celles présentes dans RayTracing.cu
*/
//TODO PROF: jouer avec ces valeurs. Attention: Il doit y avoir une seule et unique valeur a true.
#define USE_GM false
#define USE_CM false
#define USE_SM true

/*----------------------------------------------------------------------*\
|*			Declaration                     *|
\*---------------------------------------------------------------------*/

/*--------------------------------------*\
|*		Imported	    *|
\*-------------------------------------*/

/*--------------------------------------*\
|*		Public			*|
\*-------------------------------------*/

__global__ void raytracing(uchar4* ptrDevPixels, Sphere* ptrDevSphere, int nbSphere, int w, int h, int t);

/*--------------------------------------*\
|*		Private			*|
\*-------------------------------------*/

static __device__ void copyGMtoSM(Sphere* tabSpheresSM, Sphere* ptrDevSpheresGM, int n);

static __device__ void work(int w, int h, int n, float t, Sphere* ptrSpheres, uchar4* ptrDevPixels);

/*----------------------------------------------------------------------*\
|*			Implementation                  *|
\*---------------------------------------------------------------------*/

/*--------------------------------------*\
|*		Public			*|
\*-------------------------------------*/

__global__
void raytracing(uchar4* ptrDevPixels, int w, int h, Sphere* ptrDevSpheresGM, int n, float t)
{
 #if USE_SM
        extern __shared__ Sphere tabSpheresSM[];
        copyGMtoSM(tabSpheresSM, ptrDevSpheresGM, n);
        __syncthreads();
        work(w, h, n, t, tabSpheresSM, ptrDevPixels);
 #else
        work(w, h, n, t, ptrDevSpheresGM, ptrDevPixels);
 #endif

}

/*--------------------------------------*\
|*		Private			*|
\*-------------------------------------*/

__device__
void work(int w, int h, int n, float t, Sphere* ptrDevSpheres, uchar4* ptrDevPixels)
{
    RaytracingMath raytracingMath = RaytracingMath(t); // ici pour preparer cuda

        const int WH = w * h;

        const int NB_THREAD = Indice2D::nbThread();
        const int TID = Indice2D::tid();

        int s = TID;

        int i;
        int j;
        while (s < WH)
    	{
    	IndiceTools::toIJ(s, w, &i, &j);
    	raytracingMath.colorXY(&ptrDevPixels[s],ptrDevSphere,n, i,j,t);
    	s += NB_THREAD;
    	}
}

__device__
void copyGMtoSM(Sphere* tabSpheresSM, Sphere* ptrDevSpheresGM, int n)
{
        const int TID_LOCAL = Indice2D::tidLocal();
        const int NB_THREAD_BLOCK = Indice2D::nbThreadBlock();

        int s = TID_LOCAL;

        while (s < n)
        {
                tabSpheresSM[s] = ptrDevSpheresGM[s];
                s += NB_THREAD_BLOCK;
        }
}

/*----------------------------------------------------------------------*\
|*			End	                    *|
\*---------------------------------------------------------------------*/
